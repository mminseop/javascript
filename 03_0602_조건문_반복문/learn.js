// 1. 목표 : if, else문을 사용하여 특정 조건에만 코드가 실행되도록 구현할 수 있다. 

// if 문의 기본 구조
// if (조건식) {
//   // 조건식이 참(true)이면 실행되는 코드 (명령문)
// }
let age = 20;
if (age >= 18) {
    console.log('성인입니다.');
}

// else문의 기본 구조
// if (조건식) {
//     // 조건식이 참(true)이면 실행
// } else {
//     // 조건이 거짓(false)이면 실행
// }

age = 5;
if (age >= 18) {
  console.log("성인입니다.");
} else { // 'age가 18보다 크거나 같다'라는 조건이 거짓일 때 이 코드블록이 실행된다.
  console.log("미성년자입니다.");
}

// 주석(의사코드) 작성의 중요성
// 1. 계획 수립
// - 전체 로직을 미리 정리할 수 있습니다.
// - 복잡한 문제를 작은 단위로 나눌 수 있습니다.
// - 구현 전에 논리적 오류를 발견할 수 있습니다.
// 2. 코드 이해도 향상
// - 다른 개발자가 코드를 쉽게 이해할 수 있습니다.
// - 나중에 본인이 쓴 코드의 의도를 파악하기 쉬워집니다.
// - 위와 같은 이유로 유지보수가 용이해 집니다.

// ex)
// 1. 영화관 좌석 배치도 프로그램

// 입력값 검증
// - 행과 열이 1-10 사이의 숫자인지 확인
// - 잘못된 입력시 경고 메시지 출력

// 좌석 배치도 생성
// - 행 반복: 1부터 ROWS까지
//   - 한 줄의 좌석 정보를 저장할 변수 선언
//   - 열 반복: 1부터 COLS까지
//     - 좌석 번호 계산: (현재 행 - 1) * 전체 열 개수 + 현재 열
//     - 계산된 좌석 번호로 좌석 문자열 생성
//   - 완성된 한 줄 출력

// 2. 실제 구현 코드
// const ROWS = prompt("행의 개수를 입력하세요 (1-10):");
// const COLS = prompt("열의 개수를 입력하세요 (1-10):");
// 여기에 구현 코드 작성
// =====================================================
// 실습
// 입력
const userInput = 7;

if(userInput % 2 === 0) {
    console.log('짝수입니다.')
} else console.log('홀수입니다.')
// ===================================================

// 2. 목표 : else if문을 활용하여 여러 조건을 순차적으로 확인하고 실행할 수 있다.

// 조건은 순서가 중요합니다.

// `else if` 문은 여러 조건을 위에서부터 순차적으로 확인하고, 처음으로 참(`true`)이 되는 조건만 실행합니다.
// 그래서 조건을 작성할 때는 가장 좁고 구체적인 조건부터 먼저 확인하는 것이 좋습니다.
// 예를 들어, “90점 이상은 A, 80점 이상은 B, 70점 이상은 C”처럼 점수에 따라 등급을 나눌 때는 높은 점수 조건을 먼저 작성해야 정확한 결과를 얻을 수 있습니다.
// 조건의 순서를 잘못 작성하면 의도와 다른 결과가 나올 수 있으니 주의가 필요합니다.

// else if 문
// if 문은 소괄호 안에 지정한 조건이 참(true)인 경우 중괄호 안에 있는 명령문(statement)을 실행하는 구문이었습니다. 여기에 else if 문을 추가하면 여러 조건을 순차적으로 확인할 수 있으며, 모든 조건이 거짓(false)인 경우 else 문으로 대체 동작을 지정할 수 있습니다.

// if (조건식1) {
//   // 조건식1이 참(true)이면 이 코드 블록이 실행된다.
// } else if (조건식2) {
//   // 조건식1이 거짓(false)이고 조건식2가 참(true)이면 이 코드 블록이 실행된다.
// } else {
//   // 모든 조건식이 거짓이면 이 코드 블록이 실행된다.
// }
// - `else if` 문은 위에서부터 순차적으로 조건을 평가됩니다.
// - 가장 먼저 참(`true`)이 되는 조건이 실행됩니다. 즉, 참인 조건이 하나라도 발견되면 그 아래의 조건은 실행되지 않습니다.
// - 조건식은 더 구체적이고 중요한 조건부터 위쪽에 작성해야 논리적인 결과를 얻을 수 있습니다.

// 예제) 점수에 따라 학점 출력하기
let score = 85;

if (score >= 90) {
  console.log("A 학점");
} else if (score >= 80) {
  console.log("B 학점");
} else if (score >= 70) {
  console.log("C 학점");
} else {
  console.log("F 학점");
}

// `else if`문은 조건을 순차적으로 평가하기 때문에 작성 순서에 따라 결과가 달라질 수 있습니다. 가장 구체적이고 중요한 조건부터 위에 배치해야 논리적인 흐름을 유지할 수 있습니다. 잘못된 순서로 작성하면, 의도치 않은 조건이 먼저 만족되어 이후 조건이 평가되지 않는 문제가 발생할 수 있습니다.

// 또한, `else if`문이 지나치게 많아질 경우 코드의 가독성이 떨어질 수 있으므로, 필요한 경우 `switch문`이나 함수 분리를 활용하여 코드를 간결하고 명확하게 유지해야 합니다. 조건이 겹치거나 논리가 모호하지 않도록 설계하는 것이 중요합니다.

// 실습
// 현재 기온에 따라 사용자에게 입어야 하는 옷을 추천해 주는 멘트를 출력하는 프로그램을 작성해야 합니다.
// 사용자가 입력한 기온(`temperature`)에 따라 입어야 하는 옷차림을 추천해 주는 멘트를 출력해 주세요.

// - 입력한 온도(`temperature`)에 따라 정해진 멘트를 출력합니다.
//     1. 25도 이상: `"너무 더워요! 가볍고 통풍이 잘 되는 옷을 입으세요."`
//     2. 10도 이상 25도 미만: `"선선한 날씨예요. 긴팔 옷이나 얇은 외투를 챙기세요."` 
//     3. 10도 미만: `"추운 날씨입니다. 따뜻한 옷과 방한용품을 챙기세요."`

// 1. 기온을 나타내는 변수 temperature에 숫자를 할당한다
// 2. 조건문을 통해 temperature 값에 따라 다른 메시지를 출력한다
// 3. if ~ else if ~ else 문 사용
let temperature = 5;

if (temperature >= 25) {
    console.log(`"너무 더워요! 가볍고 통풍이 잘 되는 옷을 입으세요."`);
} else if (temperature >= 18 && temperature < 25) {
    console.log(`"선선한 날씨예요. 긴팔 옷이나 얇은 외투를 챙기세요."` );
} else console.log(`"추운 날씨입니다. 따뜻한 옷과 방한용품을 챙기세요."`);
// ================================================================

// 3. 목표 : if문과 switch문의 차이를 이해하고, switch문을 사용하는 것이 적절한 상황의 예시를 들 수 있다.

// 조건이 많고 값이 '정해진 경우'라면 `switch문`이 더 간결하고 명확합니다.
// `if문`은 범위 비교나 복잡한 조건에 유용하지만, 값이 정확히 일치하는 여러 경우를 비교할 땐 코드가 길어지고 가독성이 떨어질 수 있습니다.
// 예를 들어, 요일에 따라 다른 메시지를 출력하거나, 메뉴 번호에 따라 다른 기능을 실행할 때처럼 "이 값이면 이거 실행" 방식의 조건은 `switch문`이 훨씬 직관적입니다.
// 복잡한 조건은 `if문`, 명확한 값 비교는 `switch문`!
// 상황에 따라 적절한 조건문을 선택하는 습관이 중요합니다.

// switch문
// `if`문은 주어진 조건이 참(`true`)인지 확인한 후, 이에 따라 특정 코드를 실행하는 제어문입니다. 그런데, 변하지 않고 정해져 있는 여러 가지 값 중에서 하나를 선택해서 실행해야 할 경우에는 `switch`문을 사용하는 것이 더 쉽고 읽기 편합니다.
// `switch`문은 "이 값이라면 이런 걸 실행하자!"라고 정리해 주는 역할을 합니다. 초보자도 쉽게 코드를 읽고 이해할 수 있도록 돕는 도구라고 생각하면 됩니다.
// switch (조건) {
//   case 값1:
//     // 식이 값1과 같을 때 실행되는 코드
//     break;
//   case 값2:
//     // 식이 값2와 같을 때 실행되는 코드
//     break;
//   default:
//     // 모든 case에 해당하지 않을 때 실행되는 코드
// }

const day = "월요일";

switch (day) {
  case "월요일":
    console.log("한 주의 시작입니다!");
    break;
  case "금요일":
    console.log("주말이 다가왔습니다!");
    break;
  case "토요일":
  case "일요일":
    console.log("즐거운 주말 보내세요!");
    break;
  default:
    console.log("평범한 하루입니다.");
}
// - `switch (day)`는 `day`의 값을 확인합니다.
// - `case "월요일"`: `day`가 `"월요일"`과 같을 때 `"한 주의 시작입니다!"`를 출력합니다.
// - `case "토요일"`과 `case "일요일"`: `day`가 둘 중 하나와 같을 때 `"즐거운 주말 보내세요!"`를 출력합니다.
// - `default`: `day`가 모든 조건과 일치하지 않을 때 `"평범한 하루입니다."`를 출력합니다.

// ### switch문 사용시 주의 사항
// 1. break문의 중요성
//     - `break`문을 생략하는 경우 다음 `case`의 코드도 실행됩니다. 이로인해 의도치 않게 다음 `case`가 실행되어 예상치 못한 오류가 발생할 수 있습니다. 그렇기 때문에 대부분의 경우, 예상치 못한 오류를 방지하려면 각 `case`에 `break` 문을 추가하는 것이 좋습니다.
// 2. default문의 위치
//     - `default`는 반드시 마지막에 있어야 하는 것은 아니며, 다른 `case` 사이에 작성해도 정상적으로 동작합니다. 하지만 `식`(조건값)이 모든 `case`와 일치하지 않는 경우 실행되므로, 가독성을 위해 일반적으로 `switch`문 최하단에 배치합니다.


// 실습
// 식당에서 손님이 메뉴판을 보고 **메뉴 번호**를 선택해 주문하는 상황입니다. 
// 손님이 선택한 메뉴 번호(`menu`)에 따라 어떤 음식을 주문했는지 출력하는 프로그램을 작성하세요.
// 만약 메뉴판에 없는 번호를 선택하면 `"선택한 메뉴가 없습니다."`라는 메시지를 출력해야 합니다.

// 메뉴번호 1 불고기 / 2 비빔밥 / 3 된장찌개 / 4 냉면 / 나머지 선택한 메뉴가 없습니다.
const menu = 6;

switch(menu) {
    case 1:
        console.log('당신이 선택한 메뉴는 불고기입니다.');
        break;
    case 2:
        console.log('당신이 선택한 메뉴는 비빔밥입니다.');
        break;
    case 3:
        console.log('당신이 선택한 메뉴는 된장찌개입니다.');
        break;
    case 4:
        console.log('당신이 선택한 메뉴는 냉면입니다.');
        break;
    default:
        console.log('선택한 메뉴가 없습니다.');
}
// =======================================================================

// 3. 목표 : 삼항 연산자(? :)를 사용하여 조건에 따라 다른 값을 간결하게 반환하는 코드를 구현할 수 있다

// 삼항 연산자는 `if-else`문보다 더 간결하게 조건에 따라 값을 선택할 수 있는 문법입니다.
// 예를 들어, “점수가 90점 이상이면 A, 아니면 B”처럼 두 가지 경우 중 하나를 선택할 때 사용하기에 딱 알맞습니다.

// 복잡한 조건을 여러 줄로 쓰기보단, 한 줄로 결과를 바로 반환할 수 있기 때문에 가독성과 표현력이 모두 좋아집니다.

// 다만, 조건이 많아질 경우에는 오히려 가독성이 떨어질 수 있으니, 간단한 조건일 때만 사용하는 것이 좋습니다.


// 삼항 연산자의 기본 구조
// (조건식) ? 참일 때 반환할 값 : 거짓일 때 반환할 값;

// - 평가 결과가 `true` 또는 `false`로 평가되는 표현식입니다.
// - `?`는 조건식이 `true`일 때 반환할 값을 지정합니다.
// - `:`는 조건식이 `false`일 때 반환할 값을 지정합니다.

// 사용자가 입력한 나이에 따라 메시지 반환하기
age = 5;
const message = (age >= 18) ? '성인입니다.' : '미성년자입니다.';
console.log(message);

// 아래처럼 복잡한 조건은 삼항연산자 대신 if-else 쓰기
const age1 = 70;
const category = age1 >= 18  ? (age1 >= 65 ? "노인" : "성인") : "미성년자";
console.log(category); // "성인" 출력

// 단순한 조건을 표현하는데 적합하므로, 사용 목적이 분명해야 함
const score2 = 85;
const result = score2 >= 70 ? "합격" : "불합격"; // 점수에 따라 합격 여부 결정
console.log(`시험 결과: ${result}`); // "시험 결과: 합격" 출력

// 실습
// 학생의 점수(`score`)를 기준으로 **합격/불합격 여부**를 판단하는 프로그램을 작성하세요.
// **`70`점 이상이면 `합격`**, 그렇지 않으면 **`불합격`**이라는 메시지를 출력해야 합니다.
// 이때 삼항 연산자를 사용하여 구현하세요.
console.log('===========================');
const score3 = 65;
const res = (score3 >= 70) ? '합격' : '불합격';
console.log(`당신의 점수는 ${score3}점이며 시험 결과는 ${res}입니다.`);
// =====================================================================================

// 4. 목표 : for문을 사용하여 원하는 횟수 만큼 코드가 실행되도록 하는 방법을 기억한다.

// for (초기값; 조건식; 증감식) {
//   // 조건식이 참인 동안 반복 실행할 코드
// }

// 1. `초기값`
//     - 반복문이 실행될 때 최초로 설정되는 값입니다.
// 2. `조건식`
//     - 반복을 계속 진행할지 결정하는 조건에 대한 식입니다.
//     - `조건식`이 `true`이면 반복문이 실행되고, `false`이면 반복문이 종료됩니다.
// 3. `증감식`
//     - 반복할 때마다 `초기값`이 어떻게 변화할지 지정합니다.
//     - 증가(`i++`) 또는 감소(`i--`) 연산을 주로 사용합니다.

// for 문의 실행 흐름
// 1부터 5까지의 숫자를 출력하는 for문
for (let i = 1; i <= 5; i++) {
  console.log(i);
}
// 1. 초기화 단계에서 반복을 시작할 변수 값(`i`)을 설정합니다.
// 2. 조건 검사 → `true`이면 코드 실행, `false`이면 반복문이 종료됩니다.
// 3. 코드 실행 → `for`문 블록 `{}` 안의 코드가 실행됩니다.
// 4. 증감 연산 수행 → 변수 값 증가 또는 감소합니다.
// 5. 다시 조건 검사 → `true`이면 반복, `false`이면 종료합니다.

// - 1부터 100까지의 숫자를 모두 더해야 할 때
// for문을 사용하지 않는 경우 더하기 연산자와 숫자를 적는 작업을 100번 반복하게됨
// let sum = 1 + 2 + 3 + 4 + ... + 100; 

// for문을 사용하는 경우
// let sum = 0;
// for(let i = 1; i <= 100; i++) {
//     sum += i;
//     console.log(`${i}번 반복 : ${sum}`);
// }  // 3줄의 코드로 해결

// - 학생 100명의 성적을 처리해야 할 때
// for문을 사용하지 않는 경우 100명의 점수를 일일이 더해야함
// let average = (student1.score + student2.score + student3.score + ... + student100.score) / 100

// 반복문을 사용하면 students 배열에 담긴 학생 수만큼 자동으로 반복되기 때문에, 학생 수가 바뀌어도 코드 수정을 최소화할 수 있습니다.

// for문을 사용하는 경우
// let totalScore = 0;
// for(let i = 0; i < students.length; i++) {
//     totalScore += students[i].score;
// }
// let average = totalScore / students.length; // 간단하게 처리 가능

// 0부터 4까지의 숫자 출력하기
for (let i = 0; i < 5; i++) {
  console.log(`현재 숫자: ${i}`);
}

// for (let i = 1; i > 0; i++) {  // i가 항상 0보다 커서 종료되지 않음
//   console.log(i);
// }

// 실습
// `for`문을 사용하여 1부터 10까지의 숫자 중 짝수만 골라서 모두 더한 합계를 출력하는 프로그램을 작성하세요.

// ### 실습 조건
// 1. `for`문
//     - 숫자 1부터 10까지 반복하며 모든 수를 확인한다.
//     - 반복되는 숫자를 하나씩 검사하면서 짝수인지 판별한다.
// 2. `if`문
//     - 반복문 내부에서 현재 숫자가 짝수(% 2 === 0)인지 확인한다.
//     - 짝수일 경우에만 '합산 변수에 값을 누적'한다.
let sum1 = 0;
for (let i=1; i<=10; i++) {
    if (i % 2 === 0) {
        sum1 += i;
    }
}
console.log('1~10까지의 짝수의 합:', sum1);
// ================================================================

// 5. 목표 : 반복적인 코드 실행이 필요한 상황을 이해하고, 이를 해결하기 위해 for문을 사용하여 효율적으로 코드를 구현할 수 있다.

// 반복이 필요한 다양한 상황
// for문은 단순 반복뿐 아니라 숫자 계산, 조건 분기, 번호 붙이기 등 다양한 상황에서 유용하게 사용할 수 있습니다.
// 아래 예시들을 통해 for문이 실생활 문제를 어떻게 해결하는지 직접 확인해보세요.

// - 카운트다운 만들기
// 5부터 1까지 거꾸로 출력
for (let i = 5; i >= 1; i--) {
    console.log(i);
}

// - 3의 배수만 출력하기
for (let i = 1; i <= 20; i++) {
    if (i % 3 === 0) {
        console.log(`${i}는 3의 배수 입니다.`);
    }
}

// - “짝수”, “홀수” 나누어 출력하기
for (let i=1; i<=10; i++) {
    if (i % 2 === 0) {
        console.log(`${i}는 짝수`);
    } else {
        console.log(`${i}는 홀수`);
    }
}

// - “번호 붙은 메시지” 만들기
for(let i=1; i<=3; i++) {
    console.log(`${i}번째 알람을 보냈습니다.`);
}

// for문 주의사항
// 1. 반복이 필요하지 않은데도 무조건 for문을 사용하면 오히려 코드가 더 복잡해질 수 있습니다.
//     - 모든 상황이 반복문에 적합한 건 아닙니다.
//     - 예를 들어, 한 번만 실행되는 작업이라면 굳이 `for`문을 쓸 필요는 없습니다.
// 2. 반복 대상이나 횟수가 명확하지 않은 경우엔 다른 반복문이 더 적합할 수 있습니다.
//     - 예: "특정 조건을 만족할 때까지" 반복해야 하는 경우에는 `while`문이 더 적합합니다.
// 3. for문을 남용하면 오히려 코드의 가독성이 떨어질 수 있습니다.
//     - 같은 작업을 반복하더라도, 무조건 `for`문으로 감싸기보다는 반복의 필요성과 목적을 분명히 하고 사용해야 합니다.
// 4. 반복문 안에서 너무 많은 작업을 하면 코드 흐름이 복잡해질 수 있습니다.
//     - 반복문 안에는 되도록 간결한 작업만 포함하고, 복잡한 로직은 함수로 분리하는 것이 좋습니다.

// 하지만 반복이 불필요하거나 반복 구조가 복잡한 상황에서는 오히려 가독성과 유지보수를 해치게 될 수도 있습니다. 무엇을 반복할 것인가를 먼저 고민하고 반복이 필요한 상황에서 사용하는 습관을 들이는 것이 중요합니다.

// 실습
// 당신은 학원 선생님입니다.
// 학생 10명이 수업에 출석했는지 확인하고, 각 학생에게 “`출석 완료!`”라는 메시지를 출력해줘야 합니다.
// 번호가 4의 배수인 학생들은 “`오늘 주번`”이라는 메시지를 출력해줘야 합니다.
console.log('========================');
for(let i=1; i<=10; i++) {
    if (i === 1) {
        console.log('@@출석 체크@@');
    }
    console.log(`${i}번 학생: 출석 완료!`);
}

for(let i=1; i<=10; i++) {
    if (i === 1) {
        console.log('@@오늘의 주번은 누구인가@@');
    } else if (i % 4 === 0) {
        console.log(`${i}번 학생: 오늘 주번!`);
    }   
}
// ==============================================================

// 6. 목표 : while문의 동작 원리와 활용법을 이해하고, 조건 기반 반복이 필요한 상황에서 for문과 구분하여 적절하게 사용할 수 있다.

// `while`문은 반복 횟수를 알 수 없고, 조건이 만족될 때까지 반복해야 하는 상황에서 유용합니다.
// 예를 들어,
// - 정답을 맞힐 때까지 계속 퀴즈를 내야 할 때
// - 사용자가 올바른 입력을 할 때까지 반복해야 할 때
// - 서버로부터 응답이 올 때까지 기다려야 할 때
// 이처럼 언제 멈출지 모르는 반복이 필요한 경우 `while`문이 가장 적절한 도구입니다.

// while 문
// - 조건식이 참(true)인 동안 계속해서 코드 블록을 반복 실행하는 반복문입니다.
// - 조건이 거짓(false)이 되는 순간 반복이 멈추고, while문을 빠져나옵니다.

// while (조건식) {
// // 조건식이 참인 동안 반복 실행할 코드
// }

// while 조건식
// - 반복을 계속 진행할지 결정하는 조건에 대한 식입니다.
// - 조건이 `true`이면 반복문이 실행되고, `false` 가 되면 반복문이 종료됩니다.

// ======================
// ** while문의 실행 흐름
let count = 1;
while (count <= 5) {
    console.log(count);
    count++;
}
// 1. 변수 선언
//     - 반복에 사용할 변수(`count`)를 `let` 키워드로 먼저 선언합니다.
// 2. 조건 검사
//     - `count <= 5` 조건을 검사합니다. 조건이 `true`이면 `{}` 블록 내부의 코드가 실행됩니다.
//     - 조건이 `false`가 되면 반복이 종료됩니다.
// 3. 코드 실행
//     - `console.log(count)`를 실행하여 현재 값을 출력합니다.
// 4. 조건 변경
//     - `count++`를 통해 반복에 사용된 변수의 값을 변경합니다.
//     - 이 부분이 없으면 조건이 계속 `true`로 유지되어 반복이 끝나지 않고 무한 루프에 빠지게 됩니다.

// !! while문 내부에서 조건을 변화시키는 코드가 반드시 필요합니다. !! 

// for문과 while문의 선택 기준
// - `for` 문은 '정확한 반복 횟수가 정해진 경우'(ex. 1~5까지 반복)
// - `while` 문은 '반복 횟수가 정해지지 않은 경우' (특정 조건을 만족할 때 까지 반복)

// for문을 사용하면 좋은 경우
// - 반복 횟수가 비교적 명확할 때
// - 배열이나 문자열을 순회할 때
// - 초기값, 조건, 증감이 규칙적일 때

// 1. 배열을 순회할 때
const fruits = ['사과', '바나나', '오렌지'];
for (let i = 0; i < fruits.length; i++) {
    console.log(fruits[i]);
}

// 2. 정해진 횟수만큼 반복할 때
for (let i = 0; i < 5; i++) {
    console.log(`${i}번째 실행`);
}

// while문을 사용하면 좋은 경우
// - 반복 횟수가 불명확할 때
// - 조건이 동적으로 변하는 경우

// 1. 점수가 100점을 넘을 때까지 계속 점수 더하기
let total = 0;
let round = 1;

while (total < 100) {
  const score = 20; // 매 라운드에 얻는 점수
  console.log(`${round}번째 라운드: ${score}점 획득! 현재까지 점수: ${total}`);
  total += score;
  round++;
}
// 반복문이 종료된 후에 실행
console.log(`총 점수: ${total}점`);

// =========================
// 비교 예시
// 1.for 문
console.log('============1. 비교예시============')
for (let i = 0; i < 5; i++) {
	// i가 3미만이고, 1이 아닌 경우에만 출력
    if (i < 3 && i !== 1) {
        console.log(i); // 0, 2
    }
}

console.log('============2. 비교예시============')
// 2. while문
let num = 0;
let maxValue = 3;  // 이 값이 실행 중에 바뀔 수 있음

while (num < maxValue) {
    console.log(num);  // 0, 1, 2
    num++;
    // 조건값 자체가 실행 중에 변경될 수 있음
    maxValue = Math.min(maxValue, 4); //maxValue와 4중 더 작은 값을 반환
    // Math.min = 두 값 a와 b 중 작은 값을 반환
}

// ==================================
// 실습
// `while`문을 활용하여 특정 단의 구구단을 출력합니다.

// ### 조건

// 1. `while`문 사용 필수
//     - 조건이 참인 동안 반복을 실행해야 합니다.
// 2. 출력 형식
//     - `3 x 1 = 3` 과 같은 형식으로 출력되어야 합니다.
// 3. 출력 범위
//     - `3단`의 구구단을 출력합니다.

// 주석코드
// 1. 출력할 단을 변수에 저장한다 (예: 3단)
// 2. 곱해질 수(k)를 1로 초기화한다
// 3. while문으로 k가 9보다 작거나 같을 동안 반복한다
//    - 반복문 안에서 "단 x k = 결과" 형식으로 콘솔에 출력한다
//    - k를 1씩 증가시킨다

let dan = 3;
let k = 1;

console.log(`${dan}단을 출력합니다.`);
while (k <= 9) {
    console.log(`${dan} x ${k} = ${dan * k}`);
    k++;
}
// =======================================================
// 7. 목표 : 다중 반복문을 사용하여 반복적인 문제를 해결해야 하는 적절한 예시를 들 수 있으며, 실행 순서를 명확히 설명할 수 있다.

// '다중 반복문은 반복문 안에 또 다른 반복문을 포함하는 구조입니다.'

// 예를 들어, '"2층 건물의 각 층에 방이 3개 있다면, 총 몇 개의 방이 있을까?"' 같은 문제는 '층마다 방을 반복해서 세어야 하므로 반복 속 반복이 필요합니다.'

// 이때 중요한 점은 '사람은 전체 구조를 한 번에 머릿속에 그리지만', 컴퓨터는 '한 번에 한 가지 작업만 차례대로 수행'한다는 점입니다. '바깥 반복이 한 번 돌 때마다 안쪽 반복은 처음부터 끝까지 실행되기 때문에', 사람의 직관과는 다르게 느껴질 수 있습니다.

// '실행 순서를 정확히 이해하는 것이 핵심 포인트입니다.'

// 다중 반복문
// 프로그래밍에서는 반복문 안에 또 다른 반복문을 사용해야 하는 경우가 많습니다.
// 이런 경우 다중 반복문(nested loop)을 사용하면 복잡한 패턴이나 2차원 이상의 데이터를 효율적으로 처리할 수 있습니다.
console.log('======================');

// 3x3 별표 출력하기
for (let i = 0; i < 3; i++) {  // 바깥쪽 반복문
    for (let j = 0; j < 3; j++) {  // 안쪽 반복문
        console.log(`${i},${j}: *`);
	}
}
// - `i` 는 0부터 시작해서 1씩 증가하며 3이 되면 종료됩니다.
// - `j` 는 `i` 가 바뀔 때마다 매번 0으로 초기화됩니다.

// 다중반복문으로 구구단 출력
for (let i = 2; i <= 9; i++) {
    console.log(`[ ${i}단 ]`);
    for (let j = 1; j <= 9; j++) {
        console.log(`${i} x ${j} = ${i * j}`);
    }
}

// ==================================
// 실습 - 좌석 번호 출력 프로그램
// 이번 실습에서는 다중 반복문을 사용하여 지정된 행과 열에 맞는 좌석 번호 목록을 출력하는 프로그램입니다.

// 이처럼 반복 안에 반복이 필요한 이유는 다음과 같습니다.

// - 바깥 반복문은 행(줄) 을 기준으로 반복합니다.
// - 안쪽 반복문은 열(칸) 을 기준으로 반복합니다.

// 따라서 2차원 구조를 표현할 때 매우 유용하게 사용됩니다.

// ### 조건

// 1. 행(`row`)은 3, 열(`col`)은 4로 고정합니다.
//     - 좌석 번호는 1번부터 시작하여 오른쪽으로 증가합니다.
//     - 각 행마다 한 줄씩 출력되어야 하며, `console.log()`를 사용합니다.
// 2. 다중 반복문
//     - 행과 열에 맞는 좌석 배치도를 출력합니다.

//입력
const ROWS = 3;    // 행
const COLS = 4;    // 열
console.log('내 코드');
let stringArr = [];
let count2 = 1;
for (let i=0; i<ROWS; i++) {
    stringArr[i] = "";
    for(let k=0; k<COLS; k++) {
        stringArr[i] += `[좌석${count2}] `;
        count2++;
    }
    console.log(stringArr[i]);
}

// 출력
// [좌석1] [좌석2] [좌석3] [좌석4] 
// [좌석5] [좌석6] [좌석7] [좌석8] 
// [좌석9] [좌석10] [좌석11] [좌석12]

// 과제코드 정답
console.log('정답코드');
let seatNumber = 1;

// 바깥 반복문 : 3(ROWS)번 반복
for (let i = 0; i < ROWS; i++) {
  // line은 각 행마다 새롭게 초기화
  let line = '';
  // 안쪽 반복문 : 4(COLS)번 반복
  for (let j = 0; j < COLS; j++) {
    line += `[좌석${seatNumber}] `;
    seatNumber++;
  }
  console.log(line);
}